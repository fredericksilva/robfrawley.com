{"repo_token":"0C0teLiqbzLFctzoa2jk6fgGLy8s1sTWb","git":{"branch":"master","head":{"id":"864c8523f4e6013ddb94b403bde32ce143e20461","author_name":"Rob M Frawley 2nd","author_email":"robfrawley@gmail.com","committer_name":"Rob M Frawley 2nd","committer_email":"robfrawley@gmail.com","message":"removed broken feature"},"remotes":[{"name":"origin","url":"git@github.com:rfrawley\/robfrawley.com.git"}]},"run_at":"2013-09-17 05:10:01 +0000","source_files":[{"name":"Rf\/BlogBundle\/Command\/SystemCommand.php","source":"<?php\n\/*\n * This file is part of the Scribe World Application.\n *\n * (c) Scribe Inc. <scribe@scribenet.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Rf\\BlogBundle\\Command;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Command\\ContainerAwareCommand,\n    Symfony\\Component\\Console\\Input\\InputInterface,\n    Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Swift_Message,\n    Datetime;\n\n\/**\n * Class SystemCommand\n * @package Scribe\\SharedBundle\\Command\n *\/\nclass SystemCommand extends ContainerAwareCommand\n{\n    private $saveRoot = '\/tmp\/naarchive\/';\n\n    private $files = [];\n    private $exts  = [];\n    private $downloads = [];\n\n    \/**\n     * @see Command\n     *\/\n    protected function configure()\n    {\n        $this\n            ->setName('gcna:history:get')\n            ->setDescription('Get all files from http:\/\/narchive.magshare.net\/');\n    }\n\n    \/**\n     * @param  \\Symfony\\Component\\Console\\Input\\InputInterface   $input\n     * @param  \\Symfony\\Component\\Console\\Output\\OutputInterface $output\n     * @return int|null|void\n     *\/\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        $url  = 'http:\/\/narchive.magshare.net\/?dir=\/';\n        $root = 'NArchive';\n        $output->writeln('<info>Reading from '.$url.' with root directory '.$root.'<\/info>');\n\n        $this->readUrl($url, [$root], $output, true);\n        $this->doFileDownloads();\n\n        $output->writeln('<info>Files:'.print_r($this->files).'<\/info>');\n        $output->writeln('<info>Extensions:'.print_r($this->exts).'<\/info>');\n\n        file_put_contents($this->saveRoot.'files.txt', print_r($this->files, true));\n        file_put_contents($this->saveRoot.'exts.txt', print_r($this->exts, true));\n    }\n\n    private function readUrl($url, $where, OutputInterface $output, $l1 = false)\n    {\n$this->output = $output;\n\n        if (! file_exists($this->saveRoot)) {\n            mkdir($this->saveRoot, 0775, true);\n        }\n\n        \/\/$progress = $this->getHelperSet()->get('progress');\n\n        $root = urlencode(implode('\/', $where));\n        \/\/$output->writeln('Reading '.$root);\n\n        $content = file_get_contents($url.$root);\n\n        $patternD = '#<a href=\"\\?dir=(.*?)\" class=\"(.*?)\">(.*?)<\/a>#i';\n        $patternF = '#<a href=\"(.*?)\" class=\"(.*?)\">(.*?)<\/a>#i';\n\n        preg_match_all($patternD, $content, $matches);\n        preg_match_all($patternF, $content, $matchesF);\n\/\/        print_r($matchesF);\n        if ($l1 === true) {\n            \/\/$progress->start($output, count($matches[0]));\n        }\n\n        for ($i = 0; $i < count($matches[0]); $i++) {\n            $filepath = $matches[1][$i];\n            $types    = explode(' ', $matches[2][$i]);\n            if (in_array('dir', $types)) {\n                $dir = $matches[3][$i];\n                $newWhere = $where;\n                $newWhere[] = $dir;\n                $this->readUrl($url, $newWhere, $output, false);\n            }\n\n            if ($l1 === true) {\n                \/\/$progress->advance();\n            }\n\n        }\n        \n        if (count($matchesF[0]) > 0) {\n            $output->writeln('<info>Scanning files in: \"'.implode('\/', $where).'\"<\/info>');\n            for ($i = 0; $i < count($matchesF[0]); $i++) {\n                $filepath = $matchesF[1][$i];\n                $types    = explode(' ', $matchesF[2][$i]);\n                if (in_array('file', $types)) {\n                    $file = $matchesF[3][$i];\n                    $newWhere = $where;\n                    $newWhere[] = $file;\n                    $this->getFile($filepath, $newWhere);\n                }\n                \n            }\n            \n        }\n\n        if ($l1 === true) {\n            \/\/$progress->finish();\n        }\n\n    }\n\n    private function makeDirectory($where)\n    {\n        $dirpath = pathinfo($where, PATHINFO_DIRNAME);\n        if (! file_exists($dirpath)) {\n            mkdir($dirpath, 0775, true);\n        }\n    }\n\n    private function saveFile($where, $file)\n    {\n        \/\/$this->makeDirectory($where);\n        $dirpath = $this->saveRoot . implode(DIRECTORY_SEPARATOR, $where);\n        \/\/file_put_contents($dirpath = $this->saveRoot . implode(DIRECTORY_SEPARATOR, $where), file_get_contents('http:\/\/narchive.magshare.net\/'.$file));\n        $this->downloadsTo[] = $dirpath;\n        $this->downloads[] = 'http:\/\/narchive.magshare.net\/'.$file;\n    }\n\n    private function doFileDownloads()\n    {\n        $this->output->writeln('<info>Downloading '.count($this->downloads).' found files<\/info>');\n        $progress = $this->getHelperSet()->get('progress');\n        $progress->start($this->output, count($this->downloads));\n        for ($i = 0; $i < count($this->downloads); $i++) {\n            $this->makeDirectory($this->downloadsTo[$i]);\n            $this->files[] = $this->downloadsTo[$i];\n            $ext = pathinfo($this->downloadsTo[$i], PATHINFO_EXTENSION);\n            if (array_key_exists($ext, $this->exts)) {\n                $this->exts[$ext]++;\n            } else {\n                $this->exts[$ext] = 1;\n            }\n            file_put_contents($this->downloadsTo[$i], file_get_contents($this->downloads[$i]));\n            $progress->advance();\n        }\n        $progress->finish();\n    }\n\n    private function getFile($file, $where = [])\n    {\n        $where = $this->whereClean($where);\n        $this->saveFile($where, $file);\n    }\n\n    private function whereClean($where = [])\n    {\n        array_shift($where);\n\n        for ($i = 0; $i < count($where); $i++) {\n            $where[$i] = ucwords( $where[$i] );\n            $where[$i] = preg_replace( '\/\\s+\/', ' ', trim( $where[$i] ) );\n            $where[$i] = preg_replace( '\/\\s\/', '_', $where[$i] );\n            $where[$i] = preg_replace( '\/-+\/', '-', $where[$i] );\n        }\n\n        return $where;\n    }\n}","coverage":[null,null,null,null,null,null,null,null,0,null,null,null,null,0,0,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,null,null,null,null,null,null,null,0,0,0,0,null,0,0,null,0,0,null,0,0,0,null,null,0,0,null,0,0,0,null,null,null,0,null,null,0,null,0,0,null,0,0,null,0,null,0,null,0,0,0,0,0,0,0,0,0,null,0,null,0,null,0,null,0,0,0,0,0,0,0,0,0,0,0,null,0,null,0,null,0,null,0,null,0,null,null,0,0,0,0,0,0,null,null,0,null,0,null,0,0,0,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,null,null,0,0,0,0,null,null,0,0,null,0,0,0,0,0,0,null,0,0,null]},{"name":"Rf\/BlogBundle\/Controller\/AbstractController.php","source":"<?php\n\/*\n * This file is part of the Rob Frawley application\n *\n * (c) Rob Frawley 2nd <rmf@robfrawley.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Rf\\BlogBundle\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\n\n\/**\n * AbstractController\n *\/\nabstract class AbstractController extends Controller\n{\n    \/**\n     * @param array $which\n     * @return array\n     *\/\n    protected function getServices(array $which = [])\n    {\n        $services = [];\n        foreach ($which as $service_key) {\n            $services[] = $this->getServiceSelector($service_key);\n        }\n\n        return $services;\n    }\n\n    \/**\n     * @param string $service_key\n     * @return object\n     *\/\n    protected function getServiceSelector($service_key)\n    {\n        switch ($service_key) {\n            case 'em':\n                return $this\n                    ->getDoctrine()\n                    ->getManager()\n                ;\n            case 'request':\n                return $this\n                    ->getRequest()\n                ;\n            case 'session':\n                return $this\n                    ->getRequest()\n                    ->getSession()\n                ;\n            case 'user':\n                return $this\n                    ->getUser()\n                ;\n            default:\n                return $this\n                    ->container\n                    ->get($service_key)\n                ;\n        }\n    }\n\n    \/**\n     * @see Controller::createForm()\n     * @param $name\n     * @param $type\n     * @param null $data\n     * @param array $options\n     * @return mixed\n     *\/\n    public function createNamedForm($name, $type, $data = null, array $options = array())\n    {\n        return $this->container->get('form.factory')->createNamed($name, $type, $data, $options);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,null,0,0,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,null,null,null,null,null,null,null,null,null,null,0,0,0,null]},{"name":"Rf\/BlogBundle\/Controller\/DefaultController.php","source":"<?php\n\/*\n * This file is part of the Rob Frawley application\n *\n * (c) Rob Frawley 2nd <rmf@robfrawley.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Rf\\BlogBundle\\Controller;\n\n\/**\n * DefaultController\n *\/\nclass DefaultController extends AbstractController\n{\n    public function indexAction()\n    {\n        list($em) = $this->getServices(['em']);\n\n        $welcome_repo  = $em->getRepository('RfBlogBundle:Welcome');\n        $welcome       = $welcome_repo->findAll();\n        $welcome_count = count($welcome);\n        $welcome_i     = mt_rand(0, $welcome_count-1);\n\n        $post_repo = $em->getRepository('RfBlogBundle:Post');\n        $posts     = $post_repo->findLatest(3);\n\n        return $this->render(\n            'RfBlogBundle:Default:index.html.twig', [ \n                'welcome' => $welcome[$welcome_i],\n                'posts'   => $posts\n            ]\n        );\n    }\n}","coverage":[null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,0,null,0,0,0,0,null,0,0,null,0,0,0,0,0,0,0,null]},{"name":"Rf\/BlogBundle\/Controller\/MaintenanceController.php","source":"<?php\n\/*\n * This file is part of the Rob Frawley application\n *\n * (c) Rob Frawley 2nd <rmf@robfrawley.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Rf\\BlogBundle\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\n\n\/**\n * MaintenanceController\n *\/\nclass MaintenanceController extends Controller\n{\n    \/**\n     * @return Response\n     *\/\n    public function displayMaintenanceAction()\n    {\n        return $this->render('RfBlogBundle:Maintenance:down.html.twig');\n    }\n}","coverage":[null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null]},{"name":"Rf\/BlogBundle\/Controller\/MediaBrowserController.php","source":"<?php\n\/*\n * This file is part of the Rob Frawley application\n *\n * (c) Rob Frawley 2nd <rmf@robfrawley.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Rf\\BlogBundle\\Controller;\n\n\/**\n * MediaBrowserController\n *\/\nclass MediaBrowserController extends AbstractController\n{\n    \/**\n     * @var string|null\n     *\/\n    private $root = null;\n\n    \/**\n     * @param $root string|null\n     * @return $this\n     *\/\n    public function setRoot($root = null)\n    {\n        $this->root = $root;\n\n        return $this;\n    }\n\n    \/**\n     * @return string|null\n     *\/\n    public function getRoot()\n    {\n        return $this->root;\n    }\n\n    public function exploreRoot()\n    {\n        $root = $this->getRoot();\n        $this->files = [];\n        $this->dirs  = [];\n\n        $dirscan = scandir($root, SCANDIR_SORT_ASCENDING);\n        foreach ($dirscan as $entry) {\n\n            if ($entry == '.' || $entry == '..' || $entry == 'exts.txt' || $entry == 'files.txt') continue;\n\n            $path = $root.DIRECTORY_SEPARATOR.$entry;\n            $safepath = str_replace($this->getRoot(), '', $path);\n\n            if (substr($safepath, 0, 1) === DIRECTORY_SEPARATOR) {\n                $safepath = substr($safepath, 1);\n            }\n\n            if (is_dir($path)) {\n                $this->dirs[] = $safepath;\n            } elseif (is_file($path)) {\n                $this->files[] = $safepath;\n            }\n        }\n    }\n\n    \/**\n     * na files browser\n     *\/\n    public function naAction($dirpath)\n    {\n        $dirpathfixed = str_replace('|', DIRECTORY_SEPARATOR, $dirpath);\n        $this->setRoot(__DIR__.'\/..\/..\/..\/..\/web\/na\/'.$dirpathfixed);\n\n        $this->exploreRoot();\n\n        $bread = explode('|', urldecode($dirpath));\n        for($i = 0; $i < count($bread); $i++) {\n            if (empty($bread[$i])) {\n                unset($bread[$i]);\n            }\n        }\n\n        return $this->render(\n            'RfBlogBundle:MediaBrowser:na.html.twig', [ \n                'dirs' => $this->dirs,\n                'files' => $this->files,\n                'path' => $dirpath,\n                'bread' => $bread\n            ]\n        );\n    }\n\n    \/**\n     * na files browser\n     *\/\n    public function naDownloadAction($dirpath)\n    {\n        $dirpathfixed = str_replace('|', DIRECTORY_SEPARATOR, $dirpath);\n        $webRoot = '\/na\/'.$dirpathfixed;\n        $webRoot = str_ireplace('\/\/', '\/', $webRoot);\n\n        return $this->redirect('http:\/\/robfrawley.com'.$webRoot);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,0,null,null,null,null,null,0,0,0,null,null,0,0,0,0,null,0,0,null,0,null,0,0,null,0,0,0,null,0,0,0,0,0,0,0,null,null,null,null,null,0,0,0,null,0,null,0,0,0,0,0,0,null,0,0,0,0,0,0,0,0,0,null,null,null,null,null,0,0,0,0,null,0,0,null]},{"name":"Rf\/BlogBundle\/DependencyInjection\/Configuration.php","source":"<?php\n\/*\n * This file is part of the Rob Frawley application\n *\n * (c) Rob Frawley 2nd <rmf@robfrawley.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Rf\\BlogBundle\\DependencyInjection;\n\nuse Symfony\\Component\\Config\\Definition\\Builder\\TreeBuilder;\nuse Symfony\\Component\\Config\\Definition\\ConfigurationInterface;\n\n\/**\n * Configuration\n *\/\nclass Configuration implements ConfigurationInterface\n{\n    \/**\n     * {@inheritDoc}\n     *\/\n    public function getConfigTreeBuilder()\n    {\n        $treeBuilder = new TreeBuilder();\n        $rootNode    = $treeBuilder->root('rf_blog');\n\n        $rootNode\n            ->addDefaultsIfNotSet()\n            ->children()\n                ->arrayNode('maintenance_mode')\n                    ->children()\n                        ->booleanNode('enable')\n                            ->defaultFalse()\n                            ->end()\n                        ->enumNode('mode')\n                            ->values(array('all', 'selection', null))\n                            ->end()\n                        ->arrayNode('bundles')\n                            ->defaultValue([])\n                            ->prototype('scalar')->end()\n                            ->end()\n                    ->end()\n                ->end()\n                ->arrayNode('html')\n                    ->children()\n                    ->scalarNode('title_pre')\n                        ->defaultValue('')\n                        ->end()\n                    ->scalarNode('title_post')\n                        ->defaultValue('Rob Frawley')\n                        ->end()\n                    ->scalarNode('charset')\n                        ->defaultValue('UTF-8')\n                        ->end()\n                    ->scalarNode('lang')\n                        ->defaultValue('en')\n                        ->end()\n                    ->end()\n                ->end()\n                ->scalarNode('date_format')\n                    ->defaultValue('D, M j @ G:i')\n                    ->end()\n                ->scalarNode('brand_name')\n                    ->defaultValue('Rob Frawley')\n                    ->end()\n                ->scalarNode('footer_copy')\n                    ->defaultValue('Copyright &copy; 2013 Rob M Frawley 2nd.')\n                    ->end()\n                ->scalarNode('footer_credit')\n                    ->defaultValue('Designed and maintained by Inserrat Technologies.')\n                    ->end()\n                ->end()\n            ->end()\n        ;\n\n        return $treeBuilder;\n    }\n}","coverage":[null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,null,0,0,null]},{"name":"Rf\/BlogBundle\/DependencyInjection\/RfBlogExtension.php","source":"<?php\n\/*\n * This file is part of the Rob Frawley application\n *\n * (c) Rob Frawley 2nd <rmf@robfrawley.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Rf\\BlogBundle\\DependencyInjection;\n\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder,\n    Symfony\\Component\\DependencyInjection\\Loader;\nuse Symfony\\Component\\Config\\FileLocator;\nuse Symfony\\Component\\HttpKernel\\DependencyInjection\\Extension;\nuse Symfony\\Component\\DependencyInjection\\ContainerInterface,\n    Symfony\\Component\\DependencyInjection\\ContainerAwareInterface;\nuse Rf\\BlogBundle\\Utility\\Container\\ContainerAwareTrait;\n\n\/**\n * RfBlogExtension\n *\/\nclass RfBlogExtension extends Extension implements ContainerAwareInterface\n{\n    use ContainerAwareTrait {\n        __construct as __constructContainer;\n    }\n\n    \/**\n     * {@inheritDoc}\n     *\/\n    public function load(array $configs, ContainerBuilder $container)\n    {\n        $this->__constructContainer($container);\n\n        $configuration = new Configuration();\n        $config = $this->processConfiguration(\n            $configuration, \n            $configs\n        );\n\n        $this->processConfigToParameter($config);\n\n        $loader = new Loader\\YamlFileLoader(\n            $container, \n            new FileLocator(__DIR__.'\/..\/Resources\/config')\n        );\n\n        $loader->load('config.yml');\n        $loader->load('services.yml');\n    }\n\n    \/**\n     * @param $indices array\n     * @param $pre string\n     * @param $sep string\n     * @return string\n     *\/\n    private function buildConfigIndex(array $indices = [], $pre = 'rf', $sep = '.') \n    {\n        $returnIndex = $pre;\n        for ($i = 0; $i < count($indices); $i++) {\n            if ($indices[$i] === '') continue;\n            $returnIndex .= $sep . $indices[$i];\n        }\n\n        return $returnIndex;\n    }\n\n    \/**\n     * @param $config array\n     * @return $this\n     *\/\n    private function processConfigToParameter(array $config = [], $index = '')\n    {\n        foreach ($config as $key => $value) {\n            if (is_array($value)) {\n                $this->processConfigToParameter($value, $key);\n                continue;\n            }\n\n            $newIndex = $this->buildConfigIndex([$index, $key]);\n            $this\n                ->container\n                ->setParameter(\n                    $newIndex,\n                    $value\n                )\n            ;\n        }\n\n        return $this;\n    }\n}","coverage":[null,null,null,null,null,null,null,null,0,null,null,null,null,0,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,0,0,0,0,null,0,null,0,0,0,0,null,0,0,0,null,null,null,null,null,null,null,null,0,0,0,0,0,0,null,0,0,null,null,null,null,null,null,0,0,0,0,0,0,null,0,0,0,0,0,0,0,0,0,null,0,0,null]},{"name":"Rf\/BlogBundle\/Entity\/Post.php","source":"<?php\n\nnamespace Rf\\BlogBundle\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Rf\\BlogBundle\\Utility\\Filters\\String;\n\n\/**\n * Post\n *\/\nclass Post\n{\n    \/**\n     * @var integer\n     *\/\n    private $id;\n\n    \/**\n     * @var \\DateTime\n     *\/\n    private $posted;\n\n    \/**\n     * @var string\n     *\/\n    private $location;\n\n    \/**\n     * @var string\n     *\/\n    private $title;\n\n    \/**\n     * @var string\n     *\/\n    private $entry;\n\n\n    \/**\n     * Get id\n     *\n     * @return integer \n     *\/\n    public function getId()\n    {\n        return $this->id;\n    }\n\n    \/**\n     * Set posted\n     *\n     * @param \\DateTime $posted\n     * @return Post\n     *\/\n    public function setPosted($posted)\n    {\n        $this->posted = $posted;\n    \n        return $this;\n    }\n\n    \/**\n     * Get posted\n     *\n     * @return \\DateTime \n     *\/\n    public function getPosted()\n    {\n        return $this->posted;\n    }\n\n    \/**\n     * Get posted formatted\n     *\n     * @return string\n     *\/\n    public function getPostedFormatted($format = 'r')\n    {\n        return $this->posted->format($format);\n    }\n\n    \/**\n     * Set location\n     *\n     * @param string $location\n     * @return Post\n     *\/\n    public function setLocation($location)\n    {\n        $this->location = $location;\n    \n        return $this;\n    }\n\n    \/**\n     * Get location\n     *\n     * @return string \n     *\/\n    public function getLocation()\n    {\n        return $this->location;\n    }\n\n    \/**\n     * Set title\n     *\n     * @param string $title\n     * @return Post\n     *\/\n    public function setTitle($title)\n    {\n        $this->title = $title;\n    \n        return $this;\n    }\n\n    \/**\n     * Get title\n     *\n     * @return string \n     *\/\n    public function getTitle()\n    {\n        return $this->title;\n    }\n\n    \/**\n     * Get title key\n     *\n     * @return string \n     *\/\n    public function getTitleKey()\n    {\n        return String::alphanumericAndDashesOnly($this->title);\n    }\n\n    \/**\n     * Set entry\n     *\n     * @param string $entry\n     * @return Post\n     *\/\n    public function setEntry($entry)\n    {\n        $this->entry = $entry;\n    \n        return $this;\n    }\n\n    \/**\n     * Get entry\n     *\n     * @return string \n     *\/\n    public function getEntry()\n    {\n        return $this->entry;\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,0,0,null,0,0,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,0,0,null,0,0,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,0,0,null,0,0,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,0,0,null,0,0,null,null,null,null,null,null,null,0,0,0,null]},{"name":"Rf\/BlogBundle\/Entity\/PostRepository.php","source":"<?php\n\/*\n * This file is part of the Rob Frawley application\n *\n * (c) Rob Frawley 2nd <rmf@robfrawley.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Rf\\BlogBundle\\Entity;\n\nuse Doctrine\\ORM\\EntityRepository;\n\n\/**\n * PostRepository\n *\/\nclass PostRepository extends EntityRepository\n{\n    public function findLatest($limit=2)\n    {\n        $q = $this\n            ->createQueryBuilder('p')\n            ->orderBy('p.posted', 'DESC')\n            ->setMaxResults($limit)\n            ->getQuery()\n        ;\n\n        try {\n            $entries = $q->getResult();\n        }\n        catch (NoResultException $e) {\n            return null;\n        }\n\n        return $entries;\n    }\n}","coverage":[null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,0,null,0,0,0,0,0,0,null,0,0,null]},{"name":"Rf\/BlogBundle\/Entity\/Welcome.php","source":"<?php\n\nnamespace Rf\\BlogBundle\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\n\n\/**\n * Welcome\n *\/\nclass Welcome\n{\n    \/**\n     * @var integer\n     *\/\n    private $id;\n\n    \/**\n     * @var string\n     *\/\n    private $header;\n\n    \/**\n     * @var string\n     *\/\n    private $body;\n\n    \/**\n     * @var string\n     *\/\n    private $urlText;\n\n    \/**\n     * @var string\n     *\/\n    private $urlHref;\n\n    \/**\n     * @var string\n     *\/\n    private $matcher;\n\n    \/**\n     * Get id\n     *\n     * @return integer \n     *\/\n    public function getId()\n    {\n        return $this->id;\n    }\n\n    \/**\n     * Set header\n     *\n     * @param string $header\n     * @return Welcome\n     *\/\n    public function setHeader($header)\n    {\n        $this->header = $header;\n    \n        return $this;\n    }\n\n    \/**\n     * Get header\n     *\n     * @return string \n     *\/\n    public function getHeader()\n    {\n        return $this->header;\n    }\n\n    \/**\n     * Set body\n     *\n     * @param string $body\n     * @return Welcome\n     *\/\n    public function setBody($body)\n    {\n        $this->body = $body;\n    \n        return $this;\n    }\n\n    \/**\n     * Get body\n     *\n     * @return string \n     *\/\n    public function getBody()\n    {\n        return $this->body;\n    }\n\n    \/**\n     * Set urlText\n     *\n     * @param string $urlText\n     * @return Welcome\n     *\/\n    public function setUrlText($urlText)\n    {\n        $this->urlText = $urlText;\n    \n        return $this;\n    }\n\n    \/**\n     * Get urlText\n     *\n     * @return string \n     *\/\n    public function getUrlText()\n    {\n        return $this->urlText;\n    }\n\n    \/**\n     * Set urlHref\n     *\n     * @param string $urlHref\n     * @return Welcome\n     *\/\n    public function setUrlHref($urlHref)\n    {\n        $this->urlHref = $urlHref;\n    \n        return $this;\n    }\n\n    \/**\n     * Get urlHref\n     *\n     * @return string \n     *\/\n    public function getUrlHref()\n    {\n        return $this->urlHref;\n    }\n\n    \/**\n     * Set matcher\n     *\n     * @param string $matcher\n     * @return Welcome\n     *\/\n    public function setMatcher($matcher)\n    {\n        $this->matcher = $matcher;\n    \n        return $this;\n    }\n\n    \/**\n     * Get matcher\n     *\n     * @return string \n     *\/\n    public function getMatcher()\n    {\n        return $this->matcher;\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,0,0,null,0,0,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,0,0,null,0,0,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,0,0,null,0,0,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,0,0,null,0,0,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,0,0,null,0,0,null,null,null,null,null,null,null,0,0,0,null]},{"name":"Rf\/BlogBundle\/Entity\/WelcomeRepository.php","source":"<?php\n\/*\n * This file is part of the Rob Frawley application\n *\n * (c) Rob Frawley 2nd <rmf@robfrawley.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Rf\\BlogBundle\\Entity;\n\nuse Doctrine\\ORM\\EntityRepository,\n    Doctrine\\ORM\\NoResultException;\nuse Rf\\BlogBundle\\Entity\\Welcome;\n\n\/**\n * WelcomeRepository\n *\n * This class was generated by the Doctrine ORM. Add your own custom\n * repository methods below.\n *\/\nclass WelcomeRepository extends EntityRepository \n{\n    public function findOneForContext($route = null)\n    {\n        $q = $this\n            ->createQueryBuilder('w')\n            ->where('w.matcher LIKE :matcher')\n            ->setParameter('matcher', $route)\n            ->setMaxResults(1)\n            ->getQuery()\n        ;\n\n        try {\n            $w = $q->getSingleResult();\n        }\n        catch (NoResultException $e) {\n            return new Welcome();\n        }\n\n        return $w;\n    }\n}","coverage":[null,null,null,null,null,null,null,null,0,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,null,0,0,0,0,0,0,null,0,0,null]},{"name":"Rf\/BlogBundle\/Features\/Context\/FeatureContext.php","source":"<?php\n\/*\n * This file is part of the Rob Frawley application\n *\n * (c) Rob Frawley 2nd <rmf@robfrawley.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Rf\\BlogBundle\\Features\\Context;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Tests\\Functional\\AppKernel;\nuse Symfony\\Component\\HttpKernel\\KernelInterface;\nuse Behat\\Symfony2Extension\\Context\\KernelAwareInterface;\nuse Behat\\MinkExtension\\Context\\MinkContext;\n\nuse Behat\\Behat\\Context\\BehatContext,\n    Behat\\Behat\\Exception\\PendingException;\nuse Behat\\Gherkin\\Node\\PyStringNode,\n    Behat\\Gherkin\\Node\\TableNode;\n\nrequire_once 'PHPUnit\/Autoload.php';\nrequire_once 'PHPUnit\/Framework\/Assert\/Functions.php';\n\n\/**\n * Class FeatureContext\n *\/\nclass FeatureContext\n    extends    MinkContext\n    implements KernelAwareInterface\n{\n    \/**\n     * @var KernelInterface\n     *\/\n    private $kernel;\n\n    \/**\n     * @var array\n     *\/\n    private $parameters;\n\n    \/**\n     * @param array $parameters\n     *\/\n    public function __construct(array $parameters)\n    {\n        $this->parameters = $parameters;\n    }\n\n    \/**\n     * @param KernelInterface $kernel\n     *\/\n    public function setKernel(KernelInterface $kernel)\n    {\n        $this->kernel = $kernel;\n    }\n\n    \/**\n     * @Then \/^Container should have parameter \"([^\"]*)\"$\/\n     *\/\n    public function assertContainerHasParameter($config_key)\n    {\n        $container = $this->kernel->getContainer();\n        $container->getParameter($config_key);\n    }\n\n    \/**\n     * @Given \/^The app kernel is available$\/\n     *\/\n    public function assertAppKernelIsAvailable()\n    {\n        if(! $this->kernel instanceof \\AppKernel)\n        {\n            throw new \\Exception('The App Kernel is not available');\n        }\n    }\n\n    \/**\n     * @Given \/^The container is available$\/\n     *\/\n    public function assertContainerIsAvailable()\n    {\n        if(! $this->kernel->getContainer() instanceof \\appTestDebugProjectContainer)\n        {\n            throw new \\Exception('The App Debug Project Container is not available');\n        }\n    }\n}","coverage":[null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,0,null,0,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,0,0,0,null,null,null,null,null,0,0,0,0,null,null,null,null,null,0,0,0,0,0,0,null,null,null,null,null,0,0,0,0,0,0,null]},{"name":"Rf\/BlogBundle\/Listener\/Maintenance\/MaintenanceListener.php","source":"<?php\n\/*\n * This file is part of the Scribe World Application.\n *\n * (c) Scribe Inc. <scribe@scribenet.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Rf\\BlogBundle\\Listener\\Maintenance;\n\nuse Symfony\\Component\\DependencyInjection\\ContainerAwareInterface,\n    Symfony\\Component\\DependencyInjection\\ContainerInterface,\n    Symfony\\Component\\HttpKernel\\Event\\FilterControllerEvent;\nuse Symfony\\Bundle\\WebProfilerBundle\\Controller\\ProfilerController;\nuse Rf\\BlogBundle\\Controller\\MaintenanceController;\n\n\/**\n * MaintenanceListener\n *\/\nclass MaintenanceListener implements ContainerAwareInterface\n{\n    \/**\n     * @var ContainerInterface|null\n     *\/\n    private $container = null;\n\n    \/**\n     * @param $container ContainerInterface\n     *\/\n    public function __construct(ContainerInterface $container = null)\n    {\n        $this->setContainer($container);\n    }\n\n    \/**\n     * @param $container ContainerInterface\n     * @return $this\n     *\/\n    public function setContainer(ContainerInterface $container = null)\n    {\n        $this->container = $container;\n        return $this;\n    }\n\n    \/**\n     * @param $event FilterControllerEvent\n     * @return void\n     *\/\n    public function queryMaintenanceState(FilterControllerEvent $event)\n    {\n        $request = $this\n            ->container\n            ->get('request')\n        ;\n        $maintenanceEnabled = $this\n            ->container\n            ->getParameter('rf.maintenance_mode.enable')\n        ;\n        $maintenanceMode = $this\n            ->container\n            ->getParameter('rf.maintenance_mode.mode')\n        ;\n        \n        $controller = $event->getController();\n\n        if (!is_array($controller)) {\n            return;\n        }\n\n        if ($controller[0] instanceof ProfilerController) {\n            return;\n        }\n\n        if ($maintenanceEnabled !== true) {\n            return;\n        }\n\n        switch ($maintenanceMode) {\n            case 'all':\n                $this->handleMaintenanceController($event);\n                break;\n\n            case 'selection':\n            default:\n                $this->determineMaintenanceState($event);\n                break;\n        }\n    }\n\n    private function determineMaintenanceState(FilterControllerEvent $event)\n    {\n        $maintenanceBundles = $this\n            ->container\n            ->getParameter('rf.maintenance_mode.bundles')\n        ;\n        list(,,,,$qualifiedBundle) = $this->handleBundleExtraction();\n\n        foreach ($maintenanceBundles as $bundle) {\n            if ($qualifiedBundle === $bundle) {\n                $this->handleMaintenanceController($event);\n            }\n        }\n    }\n\n    \/**\n     * @return array\n     *\/\n    private function handleBundleExtraction()\n    {\n        $request = $this\n            ->container\n            ->get('request')\n        ;\n        $matches    = array();\n        $controller = $request\n            ->attributes\n            ->get('_controller')\n        ;\n        preg_match('#([^\\\\\\]*)\\\\\\([^\\\\\\]*)\\\\\\Controller\\\\\\([^:]*)::(.*)#i', $controller, $matches);\n\n        $request->attributes->set('namespace',  $matches[1]);\n        $request->attributes->set('bundle',     $matches[2]);\n        $request->attributes->set('controller', $matches[3]);\n        $request->attributes->set('action',     $matches[4]);\n\n        return [\n            $matches[1],\n            $matches[2],\n            $matches[3],\n            $matches[4],\n            $matches[1] . $matches[2]\n        ];\n    }\n\n    \/**\n     * @param $event FilterControllerEvent\n     *\/\n    private function handleMaintenanceController(FilterControllerEvent $event)\n    {\n        $event->stopPropagation();\n\n        $maintenanceController = new MaintenanceController();\n        $maintenanceController->setContainer($this->container);\n\n        $event->setController(\n            [$maintenanceController, 'displayMaintenanceAction']\n        );\n    }\n}","coverage":[null,null,null,null,null,null,null,null,0,null,null,null,null,0,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,0,0,0,0,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,null,0,null,0,0,0,null,0,0,0,null,0,0,0,null,0,0,0,0,null,0,0,0,0,0,0,null,null,0,0,0,0,0,0,null,0,0,0,0,0,0,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,null,0,0,0,0,null,0,0,0,0,0,0,0,0,null,null,null,null,null,0,0,null,0,0,null,0,0,0,0,null]},{"name":"Rf\/BlogBundle\/RfBlogBundle.php","source":"<?php\n\/*\n * This file is part of the Rob Frawley application\n *\n * (c) Rob Frawley 2nd <rmf@robfrawley.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Rf\\BlogBundle;\n\nuse Symfony\\Component\\HttpKernel\\Bundle\\Bundle;\n\nclass RfBlogBundle extends Bundle {}","coverage":[null,null,null,null,null,null,null,null,0,null,null,null,null,null,null]},{"name":"Rf\/BlogBundle\/Templating\/Extension\/AbstractExtension.php","source":"<?php\n\/*\n * This file is part of the Rob Frawley application\n *\n * (c) Rob Frawley 2nd <rmf@robfrawley.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\n\nnamespace Rf\\BlogBundle\\Templating\\Extension;\n\nuse Symfony\\Component\\DependencyInjection\\ContainerInterface,\n    Symfony\\Component\\DependencyInjection\\ContainerAwareInterface;\nuse Twig_Extension;\n\n\/**\n * AbstractExtension\n *\/\nabstract class AbstractExtension extends Twig_Extension implements ContainerAwareInterface\n{\n    \/**\n     * @var ContainerInterface\n     *\/\n    private $container;\n\n    \/**\n     * @param ContainerInterface $container\n     * @return $this\n     *\/\n    public function setContainer(ContainerInterface $container = null)\n    {\n        $this->container = $container;\n        return $this;\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function getName()\n    {\n        return get_called_class();\n    }\n\n    \/**\n     * @return array\n     *\/\n    public function getFunctions()\n    {\n        return [];\n    }\n}","coverage":[null,null,null,null,null,null,null,null,0,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,null,null,null,null,null,0,0,0,null,null,null,null,null,0,0,0,null]},{"name":"Rf\/BlogBundle\/Templating\/Extension\/SwimExtension.php","source":"<?php\n\/*\n * This file is part of the Rob Frawley application\n *\n * (c) Rob Frawley 2nd <rmf@robfrawley.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Rf\\BlogBundle\\Templating\\Extension;\n\nuse Symfony\\Component\\DependencyInjection\\ContainerInterface,\n    Symfony\\Component\\DependencyInjection\\ContainerAwareInterface;\nuse Rf\\BlogBundle\\Utility\\Container\\ContainerAwareTrait;\nuse Twig_SimpleFilter;\n\n\/**\n * SwimExtension\n *\/\nclass SwimExtension extends AbstractExtension implements ContainerAwareInterface\n{\n    use ContainerAwareTrait {\n        ContainerAwareTrait::__construct as __traitConstruct;\n    }\n\n    \/**\n     * @param $container ContainerInterface\n     *\/\n    public function __construct(ContainerInterface $container = null)\n    {\n        $this->__traitConstruct($container);\n    }\n\n    \/**\n     * @param $content string\n     * @return mixed\n     *\/\n    public function swim($content)\n    {\n        $swim = $this->container->get('scribe.parser.swim');\n\n        return $swim->render($content);\n    }\n\n    \/**\n     * @return array\n     *\/\n    public function getFilters()\n    {\n        return [\n            new Twig_SimpleFilter('swim', [$this, 'swim'], ['is_safe' => ['html']])\n        ];\n    }\n}","coverage":[null,null,null,null,null,null,null,null,0,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,0,0,null,0,0,null,null,null,null,null,0,0,0,0,0,null]},{"name":"Rf\/BlogBundle\/Templating\/Extension\/WelcomeExtension.php","source":"<?php\n\/*\n * This file is part of the Rob Frawley application\n *\n * (c) Rob Frawley 2nd <rmf@robfrawley.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Rf\\BlogBundle\\Templating\\Extension;\n\nuse Symfony\\Component\\DependencyInjection\\ContainerInterface,\n    Symfony\\Component\\DependencyInjection\\ContainerAwareInterface;\nuse Rf\\BlogBundle\\Utility\\Welcome\\WelcomeContainer;\nuse Twig_SimpleFunction;\n\n\/**\n * WelcomeExtension\n *\/\nclass WelcomeExtension extends AbstractExtension\n{\n    \/**\n     * @var WelcomeContainer|null\n     *\/\n    private $welcome;\n\n    \/**\n     * @param $welcome WelcomeContainer\n     *\/\n    public function __construct(WelcomeContainer $welcome = null)\n    {\n        $this->welcome = $welcome;\n    }\n\n    \/**\n     * @return array\n     *\/\n    public function getFunctions()\n    {\n        return [\n            new Twig_SimpleFunction('get_welcome_header', [$this->welcome, 'getHeader']),\n            new Twig_SimpleFunction('get_welcome_body', [$this->welcome, 'getBody'])\n        ];\n    }\n}","coverage":[null,null,null,null,null,null,null,null,0,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,0,0,0,0,0,0,null]},{"name":"Rf\/BlogBundle\/Templating\/Extension\/YamlConfigExtension.php","source":"<?php\n\/*\n * This file is part of the Rob Frawley application\n *\n * (c) Rob Frawley 2nd <rmf@robfrawley.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Rf\\BlogBundle\\Templating\\Extension;\n\nuse Symfony\\Component\\DependencyInjection\\ContainerInterface,\n    Symfony\\Component\\DependencyInjection\\ContainerAwareInterface;\nuse Rf\\BlogBundle\\Utility\\Config\\YamlConfigContainer;\nuse Twig_SimpleFunction;\n\n\/**\n * YamlConfigExtension\n *\/\nclass YamlConfigExtension extends AbstractExtension\n{\n    \/**\n     * @param $config YamlConfigExtension\n     *\/\n    public function __construct(YamlConfigContainer $config)\n    {\n        $this->config = $config;\n    }\n\n    \/**\n     * @param $key string\n     * @param $container ContainerInterface|null\n     * @return mixed\n     *\/\n    public function getConfig($key, $container = null)\n    {\n        return $this->config->get($key);\n    }\n\n    \/**\n     * @return array\n     *\/\n    public function getFunctions()\n    {\n        return [\n            new Twig_SimpleFunction('get_config', [$this, 'getConfig'], ['is_safe' => ['html']])\n        ];\n    }\n}","coverage":[null,null,null,null,null,null,null,null,0,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,0,0,0,0,0,null]},{"name":"Rf\/BlogBundle\/Tests\/Controller\/DefaultControllerTest.php","source":"<?php\n\/*\n * This file is part of the Rob Frawley application\n *\n * (c) Rob Frawley 2nd <rmf@robfrawley.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Rf\\BlogBundle\\Tests\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\WebTestCase;\n\nclass DefaultControllerTest extends WebTestCase\n{\n    public function testIndex()\n    {\n        $client = static::createClient();\n\n        $crawler = $client->request('GET', '\/blog\/');\n\n        $this->assertTrue($crawler->filter('html:contains(\"Welcome!\")')->count() > 0);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,0,0,null,0,null,0,0,null]},{"name":"Rf\/BlogBundle\/Utility\/Config\/AbstractConfigContainer.php","source":"<?php\n\/*\n * This file is part of the Rob Frawley application\n *\n * (c) Rob Frawley 2nd <rmf@robfrawley.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Rf\\BlogBundle\\Utility\\Config;\n\nuse Scribe\\SharedBundle\\Utility\\ContainerAbstract;\nuse Symfony\\Component\\DependencyInjection\\ContainerInterface;\nuse Symfony\\Component\\DependencyInjection\\ContainerAwareInterface;\n\n\/**\n * AbstractConfigContainer\n *\/\nabstract class AbstractConfigContainer implements ContainerAwareInterface\n{\n    \/**\n     * @var ContainerInterface\n     *\/\n    protected $container;\n\n    \/**\n     * @param $container ContainerInterface\n     *\/\n    public function __construct(ContainerInterface $container = null)\n    {\n        $this->setContainer($container);\n    }\n\n    \/**\n     * @param $container ContainerInterface|null\n     *\/\n    public function setContainer(ContainerInterface $container = null)\n    {\n        $this->container = $container;\n        return $this;\n    }\n\n    \/**\n     * @param $key string\n     * @return mixed\n     *\/\n    abstract public function get($key);\n\n    \/**\n     * @param $key string\n     * @param $value mixed\n     * @return $this\n     *\/\n    abstract public function set($key, $value);\n}","coverage":[null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,0,0,0,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Rf\/BlogBundle\/Utility\/Config\/YamlConfigContainer.php","source":"<?php\n\/*\n * This file is part of the Rob Frawley application\n *\n * (c) Rob Frawley 2nd <rmf@robfrawley.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Rf\\BlogBundle\\Utility\\Config;\n\nuse Symfony\\Component\\DependencyInjection\\ContainerInterface;\nuse Symfony\\Component\\DependencyInjection\\ContainerAwareInterface;\n\n\/**\n * YamlConfigContainer\n *\/\nclass YamlConfigContainer extends AbstractConfigContainer\n{\n    \/**\n     * @param $key string\n     * @return mixed\n     *\/\n    public function get($key)\n    {\n        return $this\n            ->container\n            ->getParameter($key)\n        ;\n    }\n\n    \/**\n     * @param $key string\n     * @param $value mixed\n     * @return $this\n     * @throws Exception\n     *\/\n    public function set($key, $value)\n    {\n        throw new Exception('YAML configuration is static and cannot be set during runtime.');\n    }\n}","coverage":[null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,null,null,null,null,null,null,null,null,0,0,0,null]},{"name":"Rf\/BlogBundle\/Utility\/Container\/ContainerAwareTrait.php","source":"<?php\n\/*\n * This file is part of the Rob Frawley application\n *\n * (c) Rob Frawley 2nd <rmf@robfrawley.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Rf\\BlogBundle\\Utility\\Container;\n\nuse Symfony\\Component\\DependencyInjection\\ContainerInterface;\nuse Rf\\BlogBundle\\Utility\\Filters\\String;\n\n\/**\n * ContainerAwareTrait\n *\/\ntrait ContainerAwareTrait\n{\n    \/**\n     * @var null\n     *\/\n    protected $container = null;\n\n    \/**\n     * @param ContainerInterface $container\n     *\/\n    public function __construct(ContainerInterface $container = null)\n    {\n        $this->setContainer($container);\n    }\n\n    \/**\n     * @param ContainerInterface $container\n     * @return $this\n     *\/\n    public function setContainer(ContainerInterface $container = null)\n    {\n        $this->container = $container;\n\n        return $this;\n    }\n\n    \/**\n     * @return ContainerInterface\n     *\/\n    public function getContainer()\n    {\n        return $this->container;\n    }\n}","coverage":[null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,0,0,null,0,0,null,null,null,null,null,0,0,0,null]},{"name":"Rf\/BlogBundle\/Utility\/Core.php","source":"<?php\n\/*\n * This file is part of the Rob Frawley application\n *\n * (c) Rob Frawley 2nd <rmf@robfrawley.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Rf\\BlogBundle\\Utility;\n\nuse BadFunctionCallException;\n\n\/**\n * Core\n *\/\nclass Core\n{\n    \/**\n     * @param mixed $value\n     * @param string $function\n     * @return mixed\n     * @throws \\BadFunctionCallException\n     *\/\n    public static function callFunctionOnValue($value, $function)\n    {\n        if (false === function_exists($function)) {\n            throw new BadFunctionCallException('Cannot call function '.$function.' on value '.$value);\n        }\n\n        return $function($value);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,null,0,0,null]},{"name":"Rf\/BlogBundle\/Utility\/Filters\/String.php","source":"<?php\n\/*\n * This file is part of the Rob Frawley application\n *\n * (c) Rob Frawley 2nd <rmf@robfrawley.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Rf\\BlogBundle\\Utility\\Filters;\n\nuse Rf\\BlogBundle\\Utility\\Core;\n\n\/**\n * String\n *\/\nclass String\n{\n    \/**\n     * @param string $s\n     * @return mixed\n     *\/\n    public static function alphanumericOnly($s)\n    {\n        return preg_replace('\/[^a-z0-9-]\/i', '', $s);\n    }\n\n    \/**\n     * @param string $s\n     * @return mixed\n     *\/\n    public static function spacesToDashes($s)\n    {\n        return str_replace(' ', '-', $s);\n    }\n\n    \/**\n     * @param string $s\n     * @return mixed\n     *\/\n    public static function dashedToSpaces($s)\n    {\n        return str_replace('-', ' ', $s);\n    }\n\n    \/**\n     * @param string $s\n     * @param string $function\n     * @return mixed\n     *\/\n    public static function alphanumericAndDashesOnly($s, $function = 'strtolower')\n    {\n        $s = self::spacesToDashes($s);\n        $s = self::alphanumericOnly($s);\n        if (null !== $function) {\n            $s = Core::callFunctionOnValue($s, $function);\n        }\n\n        return $s;\n    }\n\n    \/**\n     * @param string $phone\n     * @return string\n     *\/\n    public static function parsePhoneString($phone)\n    {\n        $phone =\n            preg_replace(\n                '~.*(\\d{3})[^\\d]*(\\d{3})[^\\d]*(\\d{4}).*~',\n                '$1$2$3',\n                $phone\n            )\n        ;\n        $phone =\n            preg_replace(\n                '\/[^0-9]\/',\n                '',\n                $phone\n            )\n        ;\n\n        return $phone;\n    }\n\n    \/**\n     * @param string $phone\n     * @return string\n     *\/\n    public static function formatPhoneString($phone)\n    {\n        if (strlen($phone) !== 10) {\n            return $phone;\n        }\n\n        $formatted =\n            '+1 ('.\n            substr($phone, 0, 3).\n            ') '.\n            substr($phone, 3, 3).'-'.\n            substr($phone, 6, 4)\n        ;\n\n        return $formatted;\n    }\n\n    \/**\n     * Function to attempt proper title case rules for a given string\n     *\n     * @author John Gruber <daringfireball.net>\n     * @author David Gouch <individed.com>\n     * @author Kroc Camen <camendesign.com>\n     * @author Rob Frawley <rfrawley@scribenet.com>\n     *\n     * @see http:\/\/camendesign.com\/code\/title-case\n     *\n     * @param $title\n     * @return mixed|string\n     *\/\n    public static function titleCase($title)\n    {\n        \/* remove any HTML elements from string, these will be added back later *\/\n        preg_match_all(\n            '\/<(code|var)[^>]*>.*?<\\\/\\1>|<[^>]+>|&\\S+;\/',\n            $title,\n            $html,\n            PREG_OFFSET_CAPTURE\n        );\n        $title = preg_replace(\n            '\/<(code|var)[^>]*>.*?<\\\/\\1>|<[^>]+>|&\\S+;\/',\n            '',\n            $title\n        );\n\n        \/* find each word, including any attached punctuation *\/\n        preg_match_all(\n            '\/[\\w\\p{L}&`\\'\u2018\u2019\"\u201c\\.@:\\\/\\{\\(\\[<>_]+-? *\/u',\n            $title,\n            $m1,\n            PREG_OFFSET_CAPTURE\n        );\n\n        \/* for each word found... *\/\n        foreach ($m1[0] as &$m2) {\n\n            \/* get the match and offset values in from matches array *\/\n            list ($m, $i) = $m2;\n\n            \/* correct the string offset value to support *multi*-byte characters, as the PREG_OFFSET_CAPTURE preg\n                value returns the *byte*-offset, this is fixed by re-counting using the *multi*-byte aware strlen *\/\n            $i = mb_strlen(substr($title, 0, $i), 'UTF-8');\n\n            \/\/find words that should always be lowercase\u2026\n            \/\/(never on the first word, and never if preceded by a colon)\n\n            $m = (\n                    $i>0 &&\n                    mb_substr($title, max(0, $i-2), 1, 'UTF-8') !== ':' &&\n                    !preg_match('\/[\\x{2014}\\x{2013}] ?\/u', mb_substr($title, max(0, $i-2), 2, 'UTF-8')) &&\n                    preg_match('\/^(a(nd?|s|t)?|b(ut|y)|en|for|i[fn]|o[fnr]|t(he|o)|vs?\\.?|via)[ \\-]\/i', $m)\n            ) ?\t(\n                    \/* change characters that are *always* lowercase *\/\n                    mb_strtolower($m, 'UTF-8')\n            ) : (\n                    (\n                            preg_match('\/[\\'\"_{(\\[\u2018\u201c]\/u', mb_substr($title, max(0, $i-1), 3, 'UTF-8')\n                    ) ?\t(\n                            \/* convert first letter within brackets and other wrappers to uppercase *\/\n                            mb_substr($m, 0, 1, 'UTF-8').\n                            mb_strtoupper(mb_substr ($m, 1, 1, 'UTF-8'), 'UTF-8').\n                            mb_substr($m, 2, mb_strlen($m, 'UTF-8')-2, 'UTF-8')\n                    ) : (\n                            (\n                                    preg_match('\/[\\])}]\/', mb_substr($title, max(0, $i-1), 3, 'UTF-8')) ||\n                                    preg_match('\/[A-Z]+|&|\\w+[._]\\w+\/u', mb_substr($m, 1, mb_strlen($m, 'UTF-8')-1, 'UTF-8'))\n                            ) ? (\n                                    \/* do not uppercase *\/\n                                    $m\n                            ) : (\n                                    \/* all else-failed, uppercase, no more fringe cases *\/\n                                    mb_strtoupper(mb_substr($m, 0, 1, 'UTF-8'), 'UTF-8').\n                                    mb_substr($m, 1, mb_strlen($m, 'UTF-8'), 'UTF-8')\n                            )\n                        )\n                    )\n                );\n\n            \/* re-splice the title with the change *\/\n            $title =\n                mb_substr($title, 0, $i, 'UTF-8').\n                $m.\n                mb_substr($title, $i+mb_strlen($m, 'UTF-8'), mb_strlen($title, 'UTF-8'), 'UTF-8')\n            ;\n        }\n\n        \/* restore any html now... *\/\n        foreach ($html[0] as &$tag) {\n            $title = substr_replace($title, $tag[0], $tag[1], 0);\n        }\n\n        \/* return result *\/\n        return $title;\n    }\n\n    \/**\n     * @param string $str1\n     * @param string $str2\n     * @param null|string $encoding\n     * @return int\n     *\/\n    static public function mb_strnatcasecmp($str1, $str2, $encoding = null)\n    {\n        if (null === $encoding) {\n            $encoding = mb_internal_encoding();\n        }\n\n        return strcmp(\n            mb_strtoupper($str1, $encoding),\n            mb_strtoupper($str2, $encoding)\n        );\n    }\n}","coverage":[null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,0,0,0,0,0,0,null,0,0,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,null,0,0,null,null,null,null,null,null,0,0,0,0,null,0,0,0,0,0,0,0,null,0,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,null,0,0,0,0,0,0,0,null,0,0,null,0,0,null,null,0,0,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,null,0,0,0,0,0,0,0,null,0,0,0,0,null,0,0,0,null,null,null,null,null,null,null,null,0,0,0,0,null,0,0,0,0,0,null]},{"name":"Rf\/BlogBundle\/Utility\/Observer\/AbstractObserver.php","source":"<?php\n\/*\n * This file is part of the Rob Frawley application\n *\n * (c) Rob Frawley 2nd <rmf@robfrawley.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Rf\\BlogBundle\\Utility\\Observer;\n\nuse SplObserver,\n    SplSubject;\n\n\/**\n * AbstractObserver\n *\/\nabstract class AbstractObserver implements SplObserver\n{\n    abstract public function update(SplSubject $subject);\n}","coverage":[null,null,null,null,null,null,null,null,0,null,null,null,null,0,null,null,null,null,null,null,null,null]},{"name":"Rf\/BlogBundle\/Utility\/Parser\/ParserInterface.php","source":"<?php\n\/*\n * This file is part of the Rob Frawley application\n *\n * (c) Rob Frawley 2nd <rmf@robfrawley.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Rf\\BlogBundle\\Utility\\Parser;\n\n\/**\n * ParserInterface\n *\/\ninterface ParserInterface\n{\n    public function render($string = null);\n}","coverage":[null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null]},{"name":"Rf\/BlogBundle\/Utility\/Parser\/Swim\/SwimObserver.php","source":"<?php\n\/*\n * This file is part of the Rob Frawley application\n *\n * (c) Rob Frawley 2nd <rmf@robfrawley.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Rf\\BlogBundle\\Utility\\Parser\\Swim;\n\nuse Symfony\\Component\\DependencyInjection\\ContainerAwareInterface,\n    Symfony\\Component\\DependencyInjection\\ContainerInterface;\nuse Rf\\BlogBundle\\Utility\\Container\\ContainerAwareTrait,\n    Rf\\BlogBundle\\Utility\\Observer\\AbstractObserver,\n    Rf\\BlogBundle\\Utility\\Filters\\String;\nuse SplSubject;\n\n\/**\n * SwimObserver\n *\/\nclass SwimObserver extends AbstractObserver implements ContainerAwareInterface\n{\n    use ContainerAwareTrait;\n\n    \/**\n     * @param SplSubject $subject\n     * @return $this\n     *\/\n    public function update(SplSubject $subject)\n    {\n        $content = $subject->getContent();\n        $content = $this->render($content);\n        $subject->setContent($content);\n\n        return $this;\n    }\n}","coverage":[null,null,null,null,null,null,null,null,0,null,null,null,null,0,null,0,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,null,0,0,null]},{"name":"Rf\/BlogBundle\/Utility\/Parser\/Swim\/SwimParser.php","source":"<?php\n\/*\n * This file is part of the Rob Frawley application\n *\n * (c) Rob Frawley 2nd <rmf@robfrawley.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Rf\\BlogBundle\\Utility\\Parser\\Swim;\n\nuse Symfony\\Component\\DependencyInjection\\ContainerAwareInterface,\n    Symfony\\Component\\DependencyInjection\\ContainerInterface;\nuse Rf\\BlogBundle\\Utility\\Container\\ContainerAwareTrait,\n    Rf\\BlogBundle\\Utility\\Filters\\String,\n    Rf\\BlogBundle\\Utility\\Subject\\AbstractSubject,\n    Rf\\BlogBundle\\Utility\\Parser\\ParserInterface;\n\n\/**\n * SwimParser\n *\/\nclass SwimParser extends AbstractSubject implements ParserInterface, ContainerAwareInterface\n{\n    use ContainerAwareTrait {\n        ContainerAwareTrait::__construct as __traitConstruct;\n    }\n\n    \/**\n     * @var string\n     *\/\n    private $string = '';\n\n    \/**\n     * @var bool\n     *\/\n    private $rendered = false;\n\n    \/**\n     * @var array\n     *\/\n    private $config = ['ExcludeLevel', 'Paths', 'WikipediaLink', 'ExternalLink', 'InternalLink', 'Queries', 'ExcludeLevel', 'Markdown'];\n\n    \/**\n     * @var array\n     *\/\n    private $parsers = [];\n\n    \/**\n     * @param ContainerInterface $container\n     * @param array $config\n     *\/\n    public function __construct(ContainerInterface $container = null, array $config = null)\n    {\n        $this->__traitConstruct($container);\n        $this->configure($config);\n        $this->setup();\n    }\n\n    \/**\n     * @param array $config\n     * @return $this\n     *\/\n    public function configure(array $config = null)\n    {\n        if ($config !== null) {\n            $this->config = (array)$config;\n        }\n\n        $this->setup(true);\n\n        return $this;\n    }\n\n    \/**\n     * @param boolean $new\n     * @return $this\n     *\/\n    private function setup($new = false)\n    {\n        if ($new === true) {\n            $this->parsers = [];\n        }\n\n        foreach ($this->config as $i => $v) {\n            if (!array_key_exists($v, $this->parsers) || !$this->parsers[$v] instanceof ParserInterface) {\n                $obj = '\\Rf\\BlogBundle\\Utility\\Parser\\Swim\\SwimParser'.$v;\n                $this->parsers[$v] = new $obj($this->container);\n            }\n\n            $this->attach($this->parsers[$v], true);\n        }\n\n        return $this;\n    }\n\n    \/**\n     * @param null $string\n     * @return $this\n     *\/\n    public function setContent($string = null)\n    {\n        $this->string = $string;\n\n        return $this;\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function getContent()\n    {\n        return $this->string;\n    }\n\n    \/**\n     * @param null $string\n     * @return string\n     *\/\n    public function render($string = null)\n    {\n        if ($string !== null) {\n            $this->setContent($string);\n        }\n        if ($string !== null || $this->rendered === false) {\n            $this->notify();\n            $this->rendered = true;\n        }\n\n        return $this->getContent();\n    }\n}","coverage":[null,null,null,null,null,null,null,null,0,null,null,null,null,0,null,0,0,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,null,null,null,null,null,null,0,0,0,0,null,0,null,0,0,null,null,null,null,null,null,0,0,0,0,null,0,0,0,0,0,null,0,0,null,0,0,null,null,null,null,null,null,0,0,null,0,0,null,null,null,null,null,0,0,0,null,null,null,null,null,null,0,0,0,0,0,0,0,0,null,0,0,null]},{"name":"Rf\/BlogBundle\/Utility\/Parser\/Swim\/SwimParserExcludeLevel.php","source":"<?php\n\/*\n * This file is part of the Rob Frawley application\n *\n * (c) Rob Frawley 2nd <rmf@robfrawley.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Rf\\BlogBundle\\Utility\\Parser\\Swim;\n\nuse Symfony\\Component\\DependencyInjection\\ContainerAwareInterface,\n    Symfony\\Component\\DependencyInjection\\ContainerInterface;\nuse Rf\\BlogBundle\\Utility\\Filters\\String,\n    Rf\\BlogBundle\\Utility\\Parser\\ParserInterface;\n\n\/**\n * SwimParserBlockLevel\n *\/\nclass SwimParserExcludeLevel extends SwimObserver implements ParserInterface, ContainerAwareInterface\n{\n    \/**\n     * @var boolean\n     *\/\n    protected $firstPass = true;\n\n    \/**\n     * @var array\n     *\/\n    protected $excludes = [];\n\n    \/**\n     * @param null $string\n     * @return mixed|null\n     *\/\n    public function render($string = null)\n    {\n        return $this->firstPass === true ?\n            $this->renderFirstPass($string) : $this->renderSecondPass($string)\n        ;\n    }\n\n    \/**\n     * @param $string string|null\n     * @return string\n     *\/\n    public function renderFirstPass($string = null)\n    {\n        @preg_match_all('#{~ex:start}((.*?\\n?)*?){~ex:end}#i', $string, $matches);\n\n        for ($i = 0; $i < count($matches[0]); $i++) {\n            $original = $matches[0][$i];\n            $content  = $matches[1][$i];\n            $anchor   = md5($content.$i);\n            $replace  = '{~ex:anchor:'.$anchor.'}';\n\n            $string = str_replace($original, $replace, $string);\n\n            $this->excludes[$anchor] = $content;\n        }\n\n        $this->firstPass = false;\n\n        return $string;\n    }\n\n    \/**\n     * @param $string string\n     * @return string\n     *\/\n    public function renderSecondPass($string = null)\n    {\n        $matches = [];\n        $pattern = '#{~ex:anchor:(.*?)}#i';\n        @preg_match_all($pattern, $string, $matches);\n\n        for ($i = 0; $i < count($matches[0]); $i++) {\n            $original = $matches[0][$i];\n            $md5      = $matches[1][$i];\n            $replace  = $this->excludes[$md5];\n\n            $string = str_replace($original, $replace, $string);\n        }\n        \n        return $string;\n    }\n}","coverage":[null,null,null,null,null,null,null,null,0,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,null,null,null,null,null,null,0,0,null,0,0,0,0,0,null,0,null,0,0,null,0,null,0,0,null,null,null,null,null,null,0,0,0,0,null,0,0,0,0,null,0,0,null,0,0,null]},{"name":"Rf\/BlogBundle\/Utility\/Parser\/Swim\/SwimParserExternalLink.php","source":"<?php\n\/*\n * This file is part of the Rob Frawley application\n *\n * (c) Rob Frawley 2nd <rmf@robfrawley.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Rf\\BlogBundle\\Utility\\Parser\\Swim;\n\nuse Symfony\\Component\\DependencyInjection\\ContainerAwareInterface,\n    Symfony\\Component\\DependencyInjection\\ContainerInterface;\nuse Rf\\BlogBundle\\Utility\\Filters\\String,\n    Rf\\BlogBundle\\Utility\\Parser\\ParserInterface;\n\n\/**\n * SwimParserExternalLink\n *\/\nclass SwimParserExternalLink extends SwimObserver implements ParserInterface, ContainerAwareInterface\n{\n    \/**\n     * @param null $string\n     * @return mixed|null\n     *\/\n    public function render($string = null)\n    {\n        @preg_match_all('#{~a:([^ ]*?)( (.*?))?}#i', $string, $nodeAMatches);\n        if (0 < count($nodeAMatches[0])) {\n\n            for ($i = 0; $i < count($nodeAMatches[0]); $i++) {\n\n                $original = $nodeAMatches[0][$i];\n                $url      = $nodeAMatches[1][$i];\n                if (substr($url, 0, 4) !== 'http') {\n                    $url = 'http:\/\/'.$url;\n                }\n                $title    = empty($nodeAMatches[3][$i]) ? $url : $nodeAMatches[3][$i];\n                $replace  = '<i class=\"icon-link a-external-icon\"> <\/i><a class=\"a-external a-tooltip\" data-toggle=\"tooltip\" data-title=\"'.$title.': '.$url.'\" href=\"'.$url.'\">'.$title.'<\/a>';\n\n                $string = str_replace($original, $replace, $string);\n            }\n        }\n\n        @preg_match_all('#{~a-popup:([^ ]*?)( (.*?))?}#i', $string, $nodeAMatches);\n        if (0 < count($nodeAMatches[0])) {\n\n            for ($i = 0; $i < count($nodeAMatches[0]); $i++) {\n\n                $original = $nodeAMatches[0][$i];\n                $url      = $nodeAMatches[1][$i];\n                if (substr($url, 0, 4) !== 'http') {\n                    $url = 'http:\/\/'.$url;\n                }\n                $title    = empty($nodeAMatches[3][$i]) ? $url : $nodeAMatches[3][$i];\n                $replace  = '<span data-popup=\"true\"><i class=\"icon-external-link a-external-icon\"> <\/i><a class=\"a-external a-tooltip\" data-toggle=\"tooltip\" data-title=\"'.$title.': '.$url.'\" href=\"'.$url.'\">'.$title.'<\/a><\/span>';\n\n                $string = str_replace($original, $replace, $string);\n            }\n        }\n\n        $nodeAMatches = [];\n        @preg_match_all('#{~mail:([^ ]*?)( (.*?))?}#i', $string, $nodeAMatches);\n        if (0 < count($nodeAMatches[0])) {\n\n            for ($i = 0; $i < count($nodeAMatches[0]); $i++) {\n\n                $original = $nodeAMatches[0][$i];\n                $url      = $nodeAMatches[1][$i];\n                $title    = empty($nodeAMatches[3][$i]) ? $url : $nodeAMatches[3][$i];\n                $replace  = '<i class=\"icon-envelope-alt a-external-icon\"> <\/i><a class=\"a-external a-tooltip\" data-toggle=\"tooltip\" data-title=\"Email '.$title.'\" href=\"mailto:'.$url.'\">'.$title.'<\/a>';\n\n                $string = str_replace($original, $replace, $string);\n            }\n        }\n\n        return $string;\n    }\n}","coverage":[null,null,null,null,null,null,null,null,0,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,0,null,0,0,0,0,0,0,0,null,0,0,0,null,0,0,null,0,null,0,0,0,0,0,0,0,null,0,0,0,null,0,0,0,null,0,null,0,0,0,0,null,0,0,0,null,0,0,null]},{"name":"Rf\/BlogBundle\/Utility\/Parser\/Swim\/SwimParserInternalLink.php","source":"<?php\n\/*\n * This file is part of the Rob Frawley application\n *\n * (c) Rob Frawley 2nd <rmf@robfrawley.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Rf\\BlogBundle\\Utility\\Parser\\Swim;\n\nuse Symfony\\Component\\DependencyInjection\\ContainerAwareInterface,\n    Symfony\\Component\\DependencyInjection\\ContainerInterface;\nuse Rf\\BlogBundle\\Utility\\Filters\\String,\n    Rf\\BlogBundle\\Utility\\Parser\\ParserInterface;\n\n\/**\n * SwimParserInternalLink\n *\/\nclass SwimParserInternalLink extends SwimObserver implements ParserInterface, ContainerAwareInterface\n{\n    \/**\n     * @param null $string\n     * @return mixed|null\n     *\/\n    public function render($string = null)\n    {\n        $router = $this\n            ->getContainer()\n            ->get('router')\n        ;\n\n        @preg_match_all('#{~path:([^ ]*?)( (.*?))?}#i', $string, $matches);\n        if (0 < count($matches[0])) {\n\n            for ($i = 0; $i < count($matches[0]); $i++) {\n\n                $original = $matches[0][$i];\n                $route    = $matches[1][$i];\n                $title    = empty($matches[3][$i]) ? $route : $matches[3][$i];\n                $url      = $router->generate($route);\n\n                $replace  = '<a class=\"a-external\" href=\"'.$url.'\">'.$title.'<\/a>';\n\n                $string = str_replace($original, $replace, $string);\n            }\n        }\n\n        return $string;\n    }\n}","coverage":[null,null,null,null,null,null,null,null,0,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,null,0,0,null,0,null,0,0,0,0,null,0,null,0,0,0,null,0,0,null]},{"name":"Rf\/BlogBundle\/Utility\/Parser\/Swim\/SwimParserMarkdown.php","source":"<?php\n\/*\n * This file is part of the Rob Frawley application\n *\n * (c) Rob Frawley 2nd <rmf@robfrawley.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Rf\\BlogBundle\\Utility\\Parser\\Swim;\n\nuse Symfony\\Component\\DependencyInjection\\ContainerAwareInterface,\n    Symfony\\Component\\DependencyInjection\\ContainerInterface;\nuse Rf\\BlogBundle\\Utility\\Parser\\ParserInterface;\n\n\/**\n * SwimParserMarkdown\n *\/\nclass SwimParserMarkdown extends SwimObserver implements ParserInterface, ContainerAwareInterface\n{\n    \/**\n     * @param null $string\n     * @return mixed|null\n     *\/\n    public function render($string = null)\n    {\n        return $this\n            ->container\n            ->get('kwattro_markdown')\n            ->render($string, ['lax_html_blocks' => true], ['xhtml' => false], 'html')\n        ;\n    }\n}","coverage":[null,null,null,null,null,null,null,null,0,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,0,null]},{"name":"Rf\/BlogBundle\/Utility\/Parser\/Swim\/SwimParserPaths.php","source":"<?php\n\/*\n * This file is part of the Rob Frawley application\n *\n * (c) Rob Frawley 2nd <rmf@robfrawley.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Rf\\BlogBundle\\Utility\\Parser\\Swim;\n\nuse Symfony\\Component\\DependencyInjection\\ContainerAwareInterface,\n    Symfony\\Component\\DependencyInjection\\ContainerInterface;\nuse Rf\\BlogBundle\\Utility\\Filters\\String,\n    Rf\\BlogBundle\\Utility\\Parser\\ParserInterface;\n\n\/**\n * SwimParserPaths\n *\/\nclass SwimParserPaths extends SwimObserver implements ParserInterface, ContainerAwareInterface\n{\n    \/**\n     * @param null $string\n     * @return mixed|null\n     *\/\n    public function render($string = null)\n    {\n        $router = $this->container->get('router');\n\n        @preg_match_all('#{~path:([^ ]*?)( (.*?))?}#i', $string, $matches);\n        if (0 < count($matches[0])) {\n\n            for ($i = 0; $i < count($matches[0]); $i++) {\n\n                $original = $matches[0][$i];\n                $key      = $matches[1][$i];\n                $url      = $router->generate($key);\n                $title    = empty($matches[3][$i]) ? $key : $matches[3][$i];\n                $replace  = '<a class=\"a-tooltip\" data-toggle=\"tooltip\" data-title=\"'.$title.': '.$url.'\" href=\"'.$url.'\">'.$title.'<\/a>';\n\n                $string = str_replace($original, $replace, $string);\n            }\n        }\n\n        return $string;\n    }\n}","coverage":[null,null,null,null,null,null,null,null,0,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,0,null,0,null,0,0,0,0,0,null,0,0,0,null,0,0,null]},{"name":"Rf\/BlogBundle\/Utility\/Parser\/Swim\/SwimParserQueries.php","source":"<?php\n\/*\n * This file is part of the Rob Frawley application\n *\n * (c) Rob Frawley 2nd <rmf@robfrawley.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Rf\\BlogBundle\\Utility\\Parser\\Swim;\n\nuse Symfony\\Component\\DependencyInjection\\ContainerAwareInterface,\n    Symfony\\Component\\DependencyInjection\\ContainerInterface;\nuse Rf\\BlogBundle\\Utility\\Filters\\String,\n    Rf\\BlogBundle\\Utility\\Parser\\ParserInterface;\n\n\/**\n * SwimParserQueries\n *\/\nclass SwimParserQueries extends SwimObserver implements ParserInterface, ContainerAwareInterface\n{\n    \/**\n     * @param null $string\n     * @return mixed|null\n     *\/\n    public function render($string = null)\n    {\n        $renderer = $this\n            ->container\n            ->get('kwattro_markdown')\n        ;\n\n        @preg_match_all('#{~\\?:(.*)}#i', $string, $matches);\n        if (0 < count($matches[0])) {\n            for ($i=0; $i<count($matches[0]); $i++) {\n                $replace = '<div class=\"callout callout-warning\"><p class=\"callout-header\">Note<\/p>'.$renderer->render($matches[1][$i]).'<\/div>';\n                $string = str_ireplace($matches[0][$i], $replace, $string);\n            }\n        }\n\n        @preg_match_all('#{~\\!:(.*)}#i', $string, $matches);\n        if (0 < count($matches[0])) {\n            for ($i=0; $i<count($matches[0]); $i++) {\n                $replace = '<div class=\"callout callout-danger\"><p class=\"callout-header\">Key Point<\/p>'.$renderer->render($matches[1][$i]).'<\/div>';\n                $string = str_ireplace($matches[0][$i], $replace, $string);\n            }\n        }\n\n        @preg_match_all('#{~\\-:(.*)}#i', $string, $matches);\n        if (0 < count($matches[0])) {\n            for ($i=0; $i<count($matches[0]); $i++) {\n                $replace = '<div class=\"callout callout-info\"><p class=\"callout-header\">Tip<\/p>'.$renderer->render($matches[1][$i]).'<\/div>';\n                $string = str_ireplace($matches[0][$i], $replace, $string);\n            }\n        }\n\n        return $string;\n    }\n}","coverage":[null,null,null,null,null,null,null,null,0,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,null,0,0,0,0,0,0,0,null,0,0,0,0,0,0,0,null,0,0,0,0,0,0,0,null,0,0,null]},{"name":"Rf\/BlogBundle\/Utility\/Parser\/Swim\/SwimParserWikipediaLink.php","source":"<?php\n\/*\n * This file is part of the Rob Frawley application\n *\n * (c) Rob Frawley 2nd <rmf@robfrawley.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Rf\\BlogBundle\\Utility\\Parser\\Swim;\n\nuse Symfony\\Component\\DependencyInjection\\ContainerAwareInterface,\n    Symfony\\Component\\DependencyInjection\\ContainerInterface;\nuse Rf\\BlogBundle\\Utility\\Filters\\String,\n    Rf\\BlogBundle\\Utility\\Parser\\ParserInterface;\n\n\/**\n * SwimParserWikipediaLink\n *\/\nclass SwimParserWikipediaLink extends SwimObserver implements ParserInterface, ContainerAwareInterface\n{\n    \/**\n     * @param null $string\n     * @return mixed|null\n     *\/\n    public function render($string = null)\n    {\n        @preg_match_all('#{~wiki:([^ ]*?)( (.*?))?}#i', $string, $nodeWikiMatches);\n        if (0 < count($nodeWikiMatches[0])) {\n\n            for ($i = 0; $i < count($nodeWikiMatches[0]); $i++) {\n\n                $original = $nodeWikiMatches[0][$i];\n                $key      = $nodeWikiMatches[1][$i];\n                $url      = 'http:\/\/en.wikipedia.org\/wiki\/'.urlencode($key);\n                $title    = empty($nodeWikiMatches[3][$i]) ? $key : $nodeWikiMatches[3][$i];\n                $replace  = '<i class=\"icon-external-link a-external-icon\"> <\/i><a class=\"a-external a-wikipedia a-tooltip\" data-toggle=\"tooltip\" data-title=\"'.$title.': '.$url.'\" href=\"'.$url.'\">'.$title.'<\/a>';\n\n                $string = str_replace($original, $replace, $string);\n            }\n        }\n\n        return $string;\n    }\n}","coverage":[null,null,null,null,null,null,null,null,0,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,0,null,0,0,0,0,0,null,0,0,0,null,0,0,null]},{"name":"Rf\/BlogBundle\/Utility\/Subject\/AbstractSubject.php","source":"<?php\n\/*\n * This file is part of the Rob Frawley application\n *\n * (c) Rob Frawley 2nd <rmf@robfrawley.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Rf\\BlogBundle\\Utility\\Subject;\n\nuse SplObserver,\n    SplSubject;\n\n\/**\n * AbstractSubject\n *\/\nclass AbstractSubject implements SplSubject\n{\n    \/**\n     * @var array\n     *\/\n    protected $observers = [];\n\n    \/**\n     * @param $observers array\n     *\/\n    public function __construct(array $observers = [])\n    {\n        foreach ($observers as $observer) {\n            if ($observer instanceof SplObserver) {\n                $this->attach($observer);\n            }\n        }\n    }\n\n    \/**\n     * @return $this|void\n     *\/\n    public function notify()\n    {\n        foreach ($this->observers as $observer) {\n            $observer->update($this);\n        }\n\n        return $this;\n    }\n\n    \/**\n     * @param SplObserver $observer\n     * @return $this|void\n     *\/\n    public function attach(SplObserver $observer, $allowDuplicate = false)\n    {\n        if ($allowDuplicate === true || !$this->has($observer)) {\n            $this->observers[] = $observer;\n        }\n\n        return $this;\n    }\n\n    \/**\n     * @param SplObserver $observer\n     * @return $this|void\n     *\/\n    public function detach(SplObserver $observer)\n    {\n        for ($i = 0; $i < count($this->observers); $i++) {\n            if ($this->observers[$i] === $observer) {\n                unset($this->observers[$i]);\n            }\n        }\n        $this->observers = array_values($this->observers);\n\n        return $this;\n    }\n\n    \/**\n     * @param SplObserver $observer\n     * @return bool\n     *\/\n    public function has(SplObserver $observer)\n    {\n        foreach ($this->observers as $o) {\n            if ($observer === $o) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}","coverage":[null,null,null,null,null,null,null,null,0,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,0,null,null,null,null,null,0,0,0,0,null,0,0,null,null,null,null,null,null,0,0,0,0,null,0,0,null,null,null,null,null,null,0,0,0,0,0,0,0,null,0,0,null,null,null,null,null,null,0,0,0,0,0,0,null,0,0,null]},{"name":"Rf\/BlogBundle\/Utility\/Welcome\/WelcomeContainer.php","source":"<?php\n\/*\n * This file is part of the Rob Frawley application\n *\n * (c) Rob Frawley 2nd <rmf@robfrawley.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Rf\\BlogBundle\\Utility\\Welcome;\n\nuse Symfony\\Component\\DependencyInjection\\ContainerInterface,\n    Symfony\\Component\\DependencyInjection\\ContainerAwareInterface;\nuse Rf\\BlogBundle\\Utility\\Container\\ContainerAwareTrait,\n    Rf\\BlogBundle\\Entity\\Welcome;\n\n\/**\n * WelcomeContainer\n *\/\nclass WelcomeContainer\n{\n    use ContainerAwareTrait;\n\n    \/**\n     * @var Welcome\n     *\/\n    private $welcome = null;\n\n    \/**\n     * @return mixed\n     *\/\n    public function initContext()\n    {\n        $em      = $this->container->get('doctrine.orm.entity_manager');\n        $request = $this->container->get('request');\n        $route   = $request->get('_route');\n\n        $welcome_repo  = $em->getRepository('RfBlogBundle:Welcome');\n        $welcome       = $welcome_repo->findOneForContext($route);\n\n        $this->welcome = $welcome;\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function getHeader()\n    {\n        if ($this->welcome === null) {\n            $this->initContext();\n        }\n\n        return $this\n            ->welcome\n            ->getHeader()\n        ;\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function getBody()\n    {\n        if ($this->welcome === null) {\n            $this->initContext();\n        }\n\n        return $this\n            ->welcome\n            ->getBody()\n        ;\n    }\n}","coverage":[null,null,null,null,null,null,null,null,0,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,null,0,0,null,0,0,null,null,null,null,null,0,0,0,0,null,0,0,0,0,0,null,null,null,null,null,0,0,0,0,null,0,0,0,0,0,null]}],"environment":{"packagist_version":"0.7.0-dev"}}